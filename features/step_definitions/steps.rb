Given(/^the program has finished$/) do
  @cucumber = `clisp example.lisp`
end

Then(/^the output is correct for each test$/) do
  lines = @cucumber.split("\n")

  lines.length.should == 17

  banner = 'Starting tests with seed 
#S(RANDOM-STATE'

  lines[0 .. 1].join("\n").should == banner

  seed = /   #\*[01]{64}\)/

  lines[2].should =~ seed

  lines[3].should

  lines[4 .. 13].join("\n").should == 'ERROR (ISNT MONEY= (DOLLARS \'M) (FRANCS M))
  
=: M is not a number

  with values #S(MONEY :AMOUNT M :CURRENCY USD) #S(MONEY :AMOUNT -2 :CURRENCY FRANC)
  for ((M -2))
  100/100 counterexamples.
FAIL (IS MONEY= (DOLLARS M) (DOLLARS N))
  with values #S(MONEY :AMOUNT 11 :CURRENCY USD) #S(MONEY :AMOUNT -19 :CURRENCY USD)
  for ((M 11) (N -19))'

  lines[14 .. -1].join("\n").should == '  98/100 counterexamples.
  0 cases checked and passed in 100 attempts.
95 tests submitted; 2 FAILED.'
end
